Password Reset Broken Logic – Account Takeover via Reset Abuse

Lab Difficulty: Apprentice
Vulnerability: Broken Password Reset Logic

Summary
This lab had a flawed password reset flow. The core issue? The server didn’t bother verifying the reset token when the new password was submitted. That means you could reset any user’s password just by knowing their username. No token needed. Wild.

Steps Taken
Logged in with the provided creds:
wiener : peter

Clicked on the “Forgot your password?” link and submitted my own username. Then clicked the “Email client” button to check the email that came in.

Reset my password to something random—just to see what’s going on.

Switched to Burp Suite and looked at the HTTP history. Found the POST request that gets sent when you actually submit the new password. It looked something like this:

POST /forgot-password?temp-forgot-password-token=abc123

username=wiener&new-password=somepass&confirm-password=somepass
At first glance, nothing weird. But I sent that request to Burp Repeater and tried deleting the temp-forgot-password-token from both the URL and body.

Surprisingly, the password still got reset. No errors. So the server wasn’t even checking the token. Big red flag.

I requested a new password reset to get a fresh request, sent that to Repeater, and this time changed the username from wiener to carlos.

Also set a new password for him, like hackedcarlos (or whatever).
Still no token. Just:

POST /forgot-password

username=carlos&new-password=hackedcarlos&confirm-password=hackedcarlos
Hit Send. Response came back clean.

Logged out, then logged in with:
carlos : hackedcarlos

Clicked on “My account,” and boom—lab solved.

Root Cause
The application didn’t validate the reset token at all when changing the password. So even though it sends a token in the reset email, it doesn’t actually check it during the final step. That basically lets anyone reset anyone’s password, as long as they know the username.

Fixes and Mitigation
The server must verify the reset token during password submission.

That token should be tied to a specific user and have an expiration.

Don’t include usernames in hidden form fields—they can be manipulated.

Bonus points if the token is single-use and stored securely server-side.
