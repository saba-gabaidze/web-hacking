Broken Brute-Force Protection — Multiple Credentials per Request

Lab Difficulty: Expert
Vulnerability: Logic flaw in brute-force protection

Summary
This lab’s brute-force protection looks solid at first glance, but there's a sneaky logic flaw. Instead of blocking or rate-limiting attempts properly, the server accepts an array of passwords in a single request. So instead of sending 100 separate login attempts, you can just pack them into one JSON array and let the server do the heavy lifting. That’s what makes this lab exploitable.

Steps Taken
Started the lab and confirmed Carlos is the target (again).

Opened up the login page, intercepted the login request using Burp Suite, and noticed it sends JSON data like this:


{
  "username": "wiener",
  "password": "test"
}
Cool. Sent that to Burp Repeater.

Then, instead of a single password, I swapped it out for an array of passwords from the candidate list. Something like:


{
  "username": "carlos",
  "password": [
    "123456",
    "password",
    "qwerty",
    "letmein",
    "trustno1",
    ...
  ]
}
Hit send, and the server replied with a 302 Found. Hmm. No error, no “invalid login,” just a redirect. That’s promising.

Right-clicked the request > Show response in browser > opened the URL in my browser.

Boom — I was logged in as Carlos. From there, clicked on My account and that was it. Lab complete.

Root Cause
The backend is doing something weird: instead of rejecting multiple login attempts or limiting them, it loops through the array of passwords and logs you in if any of them are correct. Basically, it’s brute-forcing itself on your behalf.

Fixes and Mitigation
Don’t accept arrays where a single string is expected — especially for credentials.

Properly validate request formats and reject anything abnormal.

Enforce brute-force protection server-side, per username, per IP, per attempt.

Implement rate-limiting and account lockout policies.
