Exploiting XXE via Image File Upload

**Category**: XXE  
**Difficulty**: Practitioner  

---

## Overview / What I Learned

- This lab shows how XXE vulnerabilities can be exploited even when file uploads are restricted to image formats.
- Learned how **SVG files** processed by vulnerable libraries (like Apache Batik) can trigger XXE payloads.
- Understood how XML-based images can leak files when rendered server-side.

---

## Exploit Steps / Attack Methodology

### 1. Understand the Context
- Users can upload avatar images in the comment section.
- The server processes SVG files using **Apache Batik**, a Java-based SVG library that parses XML content.

### 2. Build a Malicious SVG File
- Crafted a valid SVG image with an embedded external entity pointing to `/etc/hostname`.
- The content of the file will be rendered as text in the image.

#### Payload Used:
...xml
<?xml version="1.0" standalone="yes"?>
<!DOCTYPE test [ <!ENTITY xxe SYSTEM "file:///etc/hostname"> ]>
<svg width="128px" height="128px" xmlns="http://www.w3.org/2000/svg">
  <text font-size="16" x="0" y="16">&xxe;</text>
</svg>
3. Upload the Image
Posted a comment on a blog post.

Uploaded the above SVG as the avatar image.

4. Trigger the Exploit
Viewed the comment.

The rendered image displayed the contents of /etc/hostname.

Resolution
Extracted the hostname displayed in the image.

Submitted the hostname to complete the lab.

Notes
Apache Batik is vulnerable to XXE when used without disabling external entity resolution.

Always sanitize and validate image content on upload even image formats like SVG can carry dangerous payloads.
