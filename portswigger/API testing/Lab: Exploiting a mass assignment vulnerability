Exploiting a Mass Assignment Vulnerability

Lab Difficulty: Practitioner
Vulnerability Type: Mass Assignment

Summary
This lab demonstrates a mass assignment vulnerability in a RESTful API. The application exposes a hidden parameter (chosen_discount) 
in a GET response but fails to validate it properly on the POST request. By manually adding this parameter with a 100% discount during checkout,
an attacker can purchase a product without sufficient funds.

Objective
Exploit a mass assignment vulnerability by injecting the chosen_discount parameter into a POST request, buy the Lightweight l33t Leather Jacket,
and complete the lab.

Technical Walkthrough
1. Login and Initial Recon
Logged into the application with the provided credentials: wiener:peter.

Browsed the Lightweight l33t Leather Jacket product page and added the item to the basket.

2. Checkout Behavior
Attempted to place the order from the basket.

Order failed due to insufficient credit.

3. Analyzing API Traffic
In Burp > Proxy > HTTP History, examined both:

GET /api/checkout

POST /api/checkout

Observed that the GET request response contained a chosen_discount parameter:

"chosen_discount": {
  "percentage": 0
}
The same parameter was missing in the POST request body.

4. Testing for Mass Assignment
Sent the POST /api/checkout request to Repeater.

Modified the JSON body to include the chosen_discount field:

{
    "chosen_discount": {
        "percentage": 0
    },
    "chosen_products": [
        {
            "product_id": "1",
            "quantity": 1
        }
    ]
}
Server accepted the request without error.

Replaced the value with an invalid string ("x") to test validation:


"chosen_discount": { "percentage": "x" }
Server returned a type error, confirming that the parameter was parsed and validated.

5. Exploitation
Set the chosen_discount percentage to 100:


"chosen_discount": { "percentage": 100 }
Sent the request.

The order succeeded even though the user didnâ€™t have enough credit.

The lab was successfully completed.

Result
The lab was solved by identifying a hidden, assignable parameter (chosen_discount) through a GET request, modifying a POST request to include it with a 100% discount, and purchasing a restricted item via mass assignment.

Mitigation
To prevent mass assignment vulnerabilities:

Whitelist allowed parameters in server-side code.

Use frameworks that disable mass assignment by default or require explicit configuration.

Avoid reflecting server-side objects with sensitive fields directly to the client.

Implement input validation and authorization checks on all client-submitted data.
