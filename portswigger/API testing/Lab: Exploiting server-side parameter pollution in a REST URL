Exploiting Server-Side Parameter Pollution in a REST URL (SSPP)

Lab Difficulty: Expert
Vulnerability Type: Server-Side Parameter Pollution / REST API Injection / Path Traversal / Authentication Bypass

Summary
This lab demonstrates a Server-Side Parameter Pollution (SSPP) vulnerability affecting REST-style API URL path parameters. By manipulating the username parameter
through path traversal and injecting unexpected subpaths and fields, an attacker can bypass internal server-side logic and retrieve sensitive data. In this case,
it is possible to extract the administrator’s password reset token, reset their password, and escalate privileges.

Objective
Exploit server-side parameter pollution in the REST API endpoint to extract the administrator’s password reset token, reset the password,
log in as the administrator, and delete the user carlos.

Technical Walkthrough
1. Analyze the Forgot Password Functionality
Triggered the password reset for administrator using Burp’s browser.

Observed the POST request to /forgot-password and a related script at /static/js/forgotPassword.js.

Sent the POST request to Repeater to test input behavior.

2. Probe for URL Path-Based Injection
Modified the username parameter with various URL-encoded inputs to test server behavior:

administrator%23 → Response: Invalid route

administrator%3F → Response: Invalid route

./administrator → Response: Original behavior

../administrator → Response: Invalid route

These behaviors suggested that the server might be injecting the username into an internal API path.

3. Discover the Internal API Documentation
Used path traversal sequences to explore the server:

username=../../../../openapi.json%23

This returned an error response but disclosed an internal endpoint:

/api/internal/v1/users/{username}/field/{field}

Discovered that the server accepts field as a valid parameter.

4. Test the Internal API Fields
Injected different values into the field parameter:

username=administrator/field/foo%23 → Error: Field not supported

username=administrator/field/email%23 → Response: Normal (indicates email is valid)

Located the reset link structure in /static/js/forgotPassword.js:

/forgot-password?passwordResetToken=${resetToken}

Guessed and tested the sensitive field:

username=administrator/field/passwordResetToken%23 → Error due to unsupported field

5. Change API Version to Bypass Restrictions
Altered the path to use the internal API version explicitly:

username=../../v1/users/administrator/field/passwordResetToken%23

Received a valid password reset token in the response.

6. Reset Administrator Password
Accessed the password reset endpoint in the browser using:

/forgot-password?passwordResetToken=<extracted_token>

Set a new password (e.g., Adm1nSecure!).

7. Log In as Administrator and Delete User Carlos
Logged in with:

Username: administrator

Password: Adm1nSecure!

Accessed the admin panel via /admin and deleted carlos using:

GET /admin/delete?username=carlos

Result
Successfully exploited a server-side parameter pollution vulnerability in a REST-style URL by injecting a forged internal API path. Retrieved the administrator’s reset token, changed their password, and escalated privileges to delete another user.

Root Cause
The backend unsafely handled user input by injecting it directly into REST-style API paths, enabling attackers to:

Traverse directories using ../

Inject fields such as passwordResetToken into backend logic

Bypass restrictions by switching API versions or using hidden endpoints

Mitigation
To prevent such vulnerabilities:

Avoid placing unescaped user input directly into URL paths

Sanitize and validate all path components server-side

Use strict routing rules that prevent ambiguous or traversed paths

Implement access control checks server-side for all sensitive operations

Avoid exposing internal endpoints or include authentication before access

