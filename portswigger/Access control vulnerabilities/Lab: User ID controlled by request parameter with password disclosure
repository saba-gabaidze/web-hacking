Lab: User ID controlled by request parameter with password disclosure

Difficulty: Apprentice
Vulnerability: Insecure Direct Object Reference (IDOR) / Password Disclosure

Summary
This lab shows how a simple flaw with user ID handling can leak sensitive info—in this case, the admin’s password. The app lets you control the user ID through a URL parameter, and the password is actually included (masked on the frontend, but visible if you intercept the response). By changing that parameter to “administrator,” you can grab their password. Once you have that, logging in as admin lets you delete the user carlos and finish the lab.

Steps Taken
Logged in with the provided creds:
wiener : peter

Went to the account page to check my own details. The password field was masked, but I figured it must be coming from the server somehow.

Looked at the URL and noticed an id parameter controlling which user’s data is shown. Tried changing id=wiener to id=administrator.

Intercepted the response with Burp Suite and yep there it was: the admin’s password in plain text inside the response JSON. 

Used that password to log in as the administrator.

Once logged in, navigated to the admin panel and deleted the user carlos.

Lab done.

Root Cause
The app trusted the user-supplied id parameter without checking if you were allowed to view that user’s data. Because it returned sensitive info like passwords, this was a big problem. Basically, IDOR leading to password disclosure.

Fixes and Mitigation
Never rely on user input for sensitive data lookups without authorization checks.

Always verify that the logged-in user has permission to access the requested resource.

Don’t send passwords back to the client—ever, even masked. Passwords should only be handled server-side and verified via secure authentication methods.

Implement strict access controls on user data endpoints.
