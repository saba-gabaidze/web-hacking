JWT Authentication Bypass via jku Header Injection

Lab Difficulty: Practitioner
Vulnerability Type: JWT / Insecure Key Fetching

Summary
This lab illustrates an insecure implementation of JSON Web Token (JWT) authentication where the server trusts the jku (JSON Web Key Set URL) 
header without validating the domain. An attacker can exploit this behavior to host their own public key and forge a signed JWT that impersonates an admin user. 
This results in unauthorized access to the admin panel and account takeover.

Objective
Forge a valid JWT for the administrator user by injecting a custom JWK Set URL using the jku header, gain access to the /admin panel,
and delete the user carlos to complete the lab.

Technical Walkthrough
1. Initial Reconnaissance
Logged in using the provided credentials: wiener:peter

Sent the GET /my-account request to Burp Repeater

Modified the request to access /admin, received a 403 Forbidden response, indicating access is restricted to the administrator user

2. Key Generation and JWK Hosting
In Burp Suite, installed and opened the JWT Editor extension

Generated a new RSA key pair under the JWT Editor Keys tab

Copied the public key in JWK format

Navigated to the exploit server and replaced the body with an empty JWK set:


{
    "keys": []
}
Pasted the copied public JWK inside the keys array, resulting in:


{
    "keys": [
        {
            "kty": "RSA",
            "e": "AQAB",
            "kid": "893d8f0b-061f-42c2-a4aa-5056e12b8ae7",
            "n": "yy1wpYmffgXBxhAUJzHHocCuJolwDqql75ZWuCQ_cb33K2vh9mk6GPM9gNN4Y_qTVX67WhsN3JvaFYw"
        }
    ]
}
Stored the payload on the exploit server, making it publicly accessible

3. Forging the JWT
Went back to the JWT token used in the original authenticated session

In the JWT Editor tab, replaced the kid with the custom key ID generated earlier

Added a new jku parameter pointing to the exploit server URL hosting the JWK Set

Modified the payload sub claim to administrator

Re-signed the token using the private RSA key generated earlier

Ensured the header was not modified, then sent the modified GET /admin request

4. Accessing Admin Panel and Deleting Carlos
Successfully gained access to the /admin panel

Located the delete URL for user carlos: /admin/delete?username=carlos

Sent a GET request to the endpoint

Received confirmation that the user carlos was deleted

Result
The administrator session was successfully forged using a malicious JWK Set hosted on a controlled domain. Unauthorized access to the admin panel was achieved, and the target user carlos was deleted, solving the lab.

Mitigation
To prevent this class of vulnerability in real-world applications:

Validate all remote URLs specified in JWT headers (e.g., jku) against a strict allowlist

Never trust user-supplied key sources without validating their origin

Disable dynamic key loading or perform strict domain and TLS validation

Prefer asymmetric JWT validation with static, server-managed keys

Consider disabling jku support if not absolutely required
