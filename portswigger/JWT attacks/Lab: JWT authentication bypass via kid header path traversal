JWT Authentication Bypass via kid Header Path Traversal

Lab Difficulty: Practitioner
Vulnerability Type: JWT / Insecure Key Retrieval via Path Traversal

Summary
This lab demonstrates an insecure implementation of JWT verification where the server uses the kid parameter from the JWT header to retrieve the signing key directly from the filesystem.
The lack of proper sanitization on the kid value allows an attacker to perform a path traversal attack by referencing arbitrary files on the server, such as /dev/null. By exploiting this, 
an attacker can forge a valid JWT token signed with a weak or empty secret, impersonate the administrator, gain unauthorized access to the /admin panel, and perform privileged actions such as deleting a user.

Objective
Forge a valid JWT token by exploiting the kid header path traversal vulnerability to access the /admin panel as the administrator user, 
and delete the user carlos to complete the lab.

Technical Walkthrough
1. Initial Reconnaissance
Log in using the provided credentials: wiener:peter.

Intercept the post-login request GET /my-account in Burp Repeater.

Modify the request path to /admin to check for admin access.

Confirm access is restricted (HTTP 403 Forbidden) for a non-admin user.

2. Key Generation and Preparation
Open Burp Suite’s JWT Editor extension (install via BApp store if needed).

Navigate to the Keys tab in JWT Editor.

Create a new Symmetric Key by clicking New Symmetric Key.

Click Generate to create a random key in JWK format.

Manually replace the k value (the secret key) with a Base64-encoded null byte (AA==), effectively simulating an empty or trivial signing key.

Save the symmetric key for signing the JWT.

Note: The null byte serves as a weak signing key, which works because the server ends up using the file contents (here /dev/null) as the key.

3. Exploiting kid Path Traversal and Forging the JWT
Return to the intercepted GET /admin request in Burp Repeater.

Open the JWT Editor message editor tab to modify the JWT token.

Change the JWT header’s kid parameter value to a path traversal sequence that resolves to /dev/null:

../../../../../../../dev/null
Modify the JWT payload sub claim to administrator.

Click Sign, select the symmetric key with the null byte secret, and ensure the JWT header is not modified.

The resulting JWT is now signed with the weak secret derived from /dev/null.

4. Accessing Admin Panel and Deleting User
Send the modified GET /admin request with the forged JWT.

Observe successful access to the admin panel as the administrator.

Locate the user deletion endpoint in the admin panel response, e.g.:


/admin/delete?username=carlos
Send a request to delete the user carlos.

Confirm successful deletion and lab completion.

Result
The lab is solved by abusing the insecure use of the kid parameter that allows path traversal on the server’s filesystem to fetch signing keys. This vulnerability enables forging a JWT token with an attacker-controlled key (in this case, the empty /dev/null file contents), leading to privilege escalation to administrator and unauthorized destructive actions.

Mitigation
To prevent this vulnerability in production systems:

Never use user-controlled values like kid to directly load keys from the filesystem.

Implement strict validation and sanitization on any key identifiers.

Use a secure key management system that associates kid values with server-side stored keys only.

Avoid dynamic key loading from file paths or untrusted sources.

Implement allowlists or mappings between kid values and keys.

Use asymmetric signing (e.g., RSA) with keys managed and stored securely on the server side, never loaded from user input paths.

