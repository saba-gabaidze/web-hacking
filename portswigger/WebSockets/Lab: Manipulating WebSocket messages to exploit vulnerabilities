Manipulating WebSocket messages to exploit vulnerabilities

**Category**: WebSockets  
**Difficulty**: Apprentice  

---

## Overview / What I Learned

- WebSocket communication bypasses traditional HTTP protections, making it a critical area to test during pentests.
- Web applications often sanitize or encode dangerous input client-side, but if WebSocket messages are modifiable before being sent, these protections can be bypassed.
- I learned to intercept and manually manipulate a WebSocket message to deliver a stored XSS payload that executes in a support agent’s browser.

---

## Exploit Steps / Attack Methodology

### 1. Recon & Initial Analysis
- **Tools Used**: Burp Suite, Burp’s WebSocket History, Browser Developer Tools
- Opened the live chat widget and sent a test message (`hello`).
- Observed that WebSocket messages are sent in real-time to the server.

### 2. Test Client-side Filtering
- Sent a `<` character through the chat.
- Verified in Burp that the client encoded it as `&lt;`, proving the browser sanitizes inputs before sending.

### 3. Intercept and Modify WebSocket Message
- Sent a new message (`test`) and intercepted it.
- Modified the message to:
  {"message":"<img src=1 onerror='alert(1)'>"}
